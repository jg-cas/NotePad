<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAIAEBAAAAEAIABoBAAAJgAAACAgAAABACAAqBAAAI4EAAAoAAAAEAAAACAAAAABACAAAAAAADAE
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABSkpBp0/Pgm9ERECewAAAAMAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACZdXA/dcG4R9j4+Cb0fHQZ8AAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAGJyUGq0A/CrZycBL6WVcN1AAA
        ACEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABgYA0leXQ/bdHIS/3Ry
        Ev8rKwZ9AAAANxcXBXAnJwaCKScGgiAgBWgAAAAZAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAGBgEQVRS
        DcN0chL/ODgIv2RhD+ljYRDiRkYLwUNCCrpEQwnCQD8KuhAQBEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAfIyMGtSYkBrdPTwmyREMKs2VkIbNtbCu2YV8bs01MCLUyMAe5EBAFLwAAAAAAAAAAAAAAAAAA
        AAAAAAAABwcARjk4CLxiXw+5enlAwsrHcfnPzHT/z8x0/8/MdP+Kh0jGUlEItyIiBZ4AAAAAAAAAAAAA
        AAAAAAAAAAAAABMTAmxTUwq5kpBOys/MdP/PzHT/z8x0/8/MdP/PzHT/z8x0/25rHrAXFwO/AAAABwAA
        AAAAAAAAAAAAAAAAAAAAAAB1WFUOt8/MdP/PzHT/z8x0/8/MdP/PzHT/z8x0/8/MdP9vbCa0FRUDvwAA
        AAMAAAAAAAAAAAAAAAAAAAAAAAAAXGNgFbTPzHT/z8x0/8/MdP/PzHT/z8x0/8/MdP/LyHL6XFoPtQMD
        AJoAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA4+Pgeun51Z1c/MdP/PzHT/z8x0/8/MdP/PzHT/aGgxuklH
        CKUAAAANAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIh8DU1dWELKdmlbSz8x0/8/MdP/PzHT/b202vVxb
        CrcQEAAwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAUFARBQT8IqVpZEbVlYxq0XVoOuExM
        CKgSEgU4AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAABEFRUDXxMT
        BEIAAAAEAAAAAAAAAAAAAAAAAAAAAP//AAD//wAAz/8AAMf/AADD/wAA458AAPAHAAD4AwAA+AEAAPgB
        AAD4AQAA+AEAAPgDAAD8BwAA/g8AAP//AAAoAAAAIAAAAEAAAAABACAAAAAAAIAQAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAANQcG
        AbkREQPGCQkBsQAAAGQAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        ABINDQPBcnAS+nRyEv9zcRL9ISAFvwEBALEAAAAKAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAV0hGC8t0chL/dHIS/3RyEv8YFwS/V1YN1gQEAKsAAAACAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAABgUVEN0XRyEv90chL/Y2AQ4RwcBL90chL/SkkLywAAAHUAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACsYGATBVVMNykE/CsUODgPGaGYP6HRyEv90chL/EREDwQAA
        ABgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAL0uLgfAUlAN0HJwEvp0chL/dHIS/3Ry
        Ev9hXxDhAgIAjwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAJw4OA8JzcRL9dHIS/3Ry
        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
        AA//wAAf/+AAH//wAD//+AB///wA////h///////
</value>
  </data>
</root>